{
	/*Place your snippets for java here. Each snippet is defined under a snippet name and has a prefix, body and 
	description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	$1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	same ids are connected.
	Example:
	"Print to console": {
	"prefix": "log",
	"body": [
		"console.log('$1');",
		"$2"
	],
	"description": "Log output to console"
	}*/

	//Scanner
	//Scanner com Locale existe. buildScanLoc
	"java: Scanner Import": {
		"prefix": "impScan",
		"description": "importa o Scanner",
		"body": [
			"import java.util.Scanner;"
		]
	},
	"java: Scanner construtor": {
		"prefix": "buildScan",
		"description": "inicia e fecha o mauricezão!",
		"body": [
			"Scanner maurice = new Scanner (System.in);",
			"$0",
			"maurice.close();"
		]
	},
	"java: Scanner construtor com Locale": {
		"prefix": "buildScanLoc",
		"description": "inicia e fecha o mauricezão!",
		"body": [
			"Scanner maurice = new Scanner (System.in).useLocale(/*Locale.US*/$0);",
			"$0",
			"maurice.close();"
		]
	},

	//Pop up
	"java: import de Swing (biblioteca de popup": {
		"prefix": "impPopUp",
		"body": "import javax.swing.*;"
	},
	"java: construtor do PopUp": {
		"prefix": "buildPop",
		"description": "Faz o construtor do popUp",
		"body": [
			"JFrame karlos = new JFrame();",
			"$0",
			"System.exit(0);"
		],
	},
	"java: PopUp de msg sout": {
		"prefix": "popPrint",
		"description": "Cria um argumento de pop up pique sout",
		"body": "JOptionPane.showMessageDialog(karlos, $0 );"
	},
	"java: PopUp de Input String": {
		"prefix": "popScanString",
		"description": "Argumento de pop up para entrada de dados tipo string",
		"body": "JOptionPane.showInputDialog(karlos, $0 );"
	},
	"java: PopUp de Input Int": {
		"prefix": "popScanInt",
		"description": "Argumento de pop up para entrada de dados tipo int",
		"body": "Integer.parseInt(JOptionPane.showInputDialog(karlos, $0 ));"
	},
	"java: PopUp de Input Double": {
		"prefix": "popScanDouble",
		"description": "Argumento de pop up para entrada de dados tipo Double",
		"body": "Double.parseDouble(JOptionPane.showInputDialog(karlos, $0 ));"
	},

	//Decimal Format
	"java: Decimal Format String": {
		"prefix": "impDf",
		"description": "Importador de formatador de casas decimais",
		"body": "import java.text.DecimalFormat;",
	},
	"java: Decimal Format Formatar": {
		"prefix": "buildDf",
		"description": "Declarar o construtor",
		"body": "DecimalFormat marselo = new DecimalFormat($0);",
	},
	"java: Decimal format formatador Sintaxe": {
		"prefix": "dfForm",
		"description": "Coloca a sintaxe para formatar um número em uma variável",
		"body": "marselo.format($0)",
	},

	//Locale
	"java: Locale import": {
		"prefix": "impLocale",
		"description": "importa a biblioteca Locale",
		"body": "import java.util.Locale;"
	},
	"java: Locale build":{
		"prefix": "buildLocale",
		"description": "Usar no fim do Scanner",
		"body": ".useLocale(/*Locale.US*/ $0)"		
	}
}
